name: CI/CD

on: [ pull_request, push ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository }}
  TEST_IMAGE_NAME: app_test:latest
  TEST_IMAGE_ARTIFACT: ${{ github.sha }}_image
  TEST_IMAGE_PATH: /tmp/test_image.tar

jobs:
  pre_build:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - uses: hadolint/hadolint-action@v1.6.0
        with:
          dockerfile: deploy/Dockerfile

  build_test_image:
    runs-on: ubuntu-20.04
    needs: pre_build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build test Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: deploy/Dockerfile
          push: false
          tags: ${{ env.TEST_IMAGE_NAME }}
          target: test
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:_buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:_buildcache,mode=max
          outputs: type=docker,dest=${{ env.TEST_IMAGE_PATH }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TEST_IMAGE_ARTIFACT }}
          path: ${{ env.TEST_IMAGE_PATH }}
          retention-days: 1

  lint:
    runs-on: ubuntu-20.04
    needs: build_test_image
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.TEST_IMAGE_ARTIFACT }}
          path: ${{ env.TEST_IMAGE_PATH }}

      - name: Load Docker image
        run: |
          ls -l  ${{ env.TEST_IMAGE_PATH }}
          docker load --input ${{ env.TEST_IMAGE_PATH }}
          docker image ls -a

  build:
    runs-on: ubuntu-20.04
    needs: [ lint ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=sha

      - name: Build production and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: deploy/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: production
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:_buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:_buildcache,mode=max

    outputs:
      tag: ${{ steps.meta.outputs.version  }}

  deploy:
    runs-on: ubuntu-20.04
    needs: build
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - name: Deploy
        run: curl -k -X POST -d "component=${{ secrets.DEPLOYER_COMPONENT }}&key=${{ secrets.DEPLOYER_KEY }}&tag=${{ needs.build.outputs.tag }}" ${{ secrets.DEPLOYER_HOST }}
